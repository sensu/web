parser: "@typescript-eslint/parser"
plugins:
  - jsx-a11y
  - prettier
  - react
  - react-hooks
  - import
  - "@typescript-eslint"
  - "@sensuapp"
settings:
  import/resolver:
    babel-module:
extends:
  - eslint:recommended
  - plugin:react/recommended
  - plugin:@typescript-eslint/recommended
  - plugin:jsx-a11y/recommended
  - plugin:import/errors
  - plugin:import/warnings
  - prettier
  - prettier/react
env:
  node: true
  es6: true
globals:
  IntlRelativeFormat: false
  isNaN: false
rules:
  react-hooks/rules-of-hooks: error
  react-hooks/exhaustive-deps: error

  react/no-deprecated: warn

  # Disallow global RegExp instances to prevent unwanted side-effects
  "@sensuapp/no-global-regex":
    - error
    - allowCallExpressions: true
      allowEphemeral: true

  # Require dependencies to be explicitly declared
  import/no-extraneous-dependencies: error

  # The ability of eslint-plugin-import to check that a named export exists is
  # limited to checking the immediately referenced file. `export * from "..."`
  # expressions are not unwrapped. We can instead rely on Typescript to
  # assert the shapes of imported modules.
  import/named: off
  import/namespace: off
  import/default: off

  # Indent is owned by prettier
  "@typescript-eslint/indent": off
  react/jsx-indent: off

  # Allow explicit use of `any`
  "@typescript-eslint/no-explicit-any": off

  # Don't require explicit return types. TypeScript's type inferrence has come
  # a long way.
  "@typescript-eslint/explicit-function-return-type": off

  # Don't require unnecessary `public` accessor
  "@typescript-eslint/explicit-member-accessibility": off

  "@typescript-eslint/no-unused-vars":
    - error
    # Allow underscore-prefix unused vars
    - varsIgnorePattern: "^_"
      # allow using rest spread as an objecty omit utility
      ignoreRestSiblings: true

  # Some imported module interfaces / APIs require camelcase names
  "@typescript-eslint/camelcase": off

  # Single line conditionals are more difficult to set breakpoints on.
  curly:
    - error
    - all

  # This is good practice but hard to accomodate while using material-ui
  jsx-a11y/mouse-events-have-key-events: warn

  # We trust our own discression to use this responsibily
  jsx-a11y/no-autofocus: off
overrides:
  - files: "*.js"
    rules:
      react/prop-types: error
      "@typescript-eslint/no-var-requires": off
  - files: ["*.ts", "*.tsx"]
    rules:
      # Rely on TypeScript to check that imports resolve correctly
      import/no-unresolved: off

      # TypeScript may export an overloaded function more than once
      import/export: off

  - files: ["*.test.tsx", "*.test.js", "*.test.ts"]
    env:
      jest: true
      node: true
